
class TestbedDataAnalyzer:

    '''
        Perform calculations on data generated by testbed resources.
        
        Note: A testbed resource can be a client, a server, a set of 
        clients/servers, or the entire testbed.
    '''

    @staticmethod
    def get_mean(values: 'list[dict]') -> 'float':
        ''' 
            return: mean value of a set of testbed resource 
            values
        '''

        mean = .0

        if values:
            for v in values:
                mean += float(v['value'])  

            mean /= len(values)

        return mean

    @staticmethod
    def get_uptime(pkts: 'list') -> 'float':
        ''' 
            return: uptime of a testbed resource
        '''

        pktcount = len(pkts)
        frstTime = pkts[0]['time'].timestamp()
        lastTime = pkts[pktcount - 1]['time'].timestamp()

        time = lastTime - frstTime

        return time

    @staticmethod
    def get_packet_throughput(pkts: 'list') -> 'float':
        ''' 
            return: throughput of a testbed resource in pps 
            (packets per second) 
        '''

        throughput = .0

        if pkts:
            pktcount = len(pkts)
            time = TestbedDataAnalyzer.get_uptime(pkts)

            # throughput in pps (packets per second)
            throughput = pktcount / time

        return throughput

    @staticmethod
    def get_PDR(txcount: 'int', rxcount: 'int') -> 'float':
        ''' 
            return: packet delivery ratio of a testbed client mote
        '''

        pdr = rxcount / txcount

        return pdr

    @staticmethod
    def get_PER(txcount: 'int', rxcount: 'int') -> 'float':
        ''' 
            return: packet error ratio of a testbed client mote
        '''

        per = 1 - TestbedDataAnalyzer.get_PDR(txcount, rxcount)
        per = .0 if per < 0 else per

        return per

    @staticmethod
    def get_delay(txpkt: 'dict', rxpkt: 'dict') -> 'float':
        ''' 
            return: packet delay of a testbed client mote in ms
        '''

        rxsecs = float(rxpkt['time'].timestamp())
        txsecs = float(txpkt['time'].timestamp())

        delay = rxsecs - txsecs
        delay = .0 if delay < .0 else delay
        delay *= 1000

        # DEBUG LOG
        # print(
        #     f'{round(rxsecs * 1000, 1)}'
        #     f' - {round(txsecs * 1000, 1)}',
        #     f'  = {round(delay, 1)} ms'
        # )

        return delay
    
    @staticmethod
    def get_delays(txpkts: 'list', rxpkts: 'list') -> 'list':
        ''' 
            return: packet delays of a testbed client mote in ms
            (If Tx packet was lost, delay will be -1).
        '''

        delays = []
        rxpktsValues = [p['value'] for p in rxpkts]

        for tx in txpkts:
            delay = -1.

            if tx['value'] in rxpktsValues:
                rx = rxpktsValues.index(tx['value'])
                rx = rxpkts[rx]
                delay = TestbedDataAnalyzer.get_delay(tx, rx)
            
            delays.append(delay)

        return delays
